#include <cstring>
#include <stdio.h>
#include <string>

// Prodrive Motion Platform Simulink includes
#include "dynamiclibrary_create.h"
#include "stdlib_proxy.h"
#include "dynamiclibrary_callbacks.h"
#include "simulink_library.h"
#include "dynamiclibrary_simulink.h"

extern "C" {

#include "events.h"
#include "PIDcontroller4CoreCentralizedTestReadyMotor.h"
#include "PIDcontroller4CoreCentralizedTestReadyMotor_types.h"
#include "PIDcontroller4CoreCentralizedTestReadyMotor_private.h"

}
// The std_proxy does not work for:
// - Windows simulator (dll)
// - HW (statically linked)
// To overcome the leaks for memory allocated in this file, the memory allocation functions are directly mapped on the callback functions
// Allocations are typically done in this file
// Memory allocated in other files generated by simulink still suffer on these platforms from leaks
#define free(arg)                      PmpInternal::DynamicLibrary::libCallbacks.free(PmpInternal::DynamicLibrary::libCallbacks.handle, arg)
#define malloc(size)                   PmpInternal::DynamicLibrary::libCallbacks.malloc(PmpInternal::DynamicLibrary::libCallbacks.handle, size)
#define calloc(nmemb, size)            PmpInternal::DynamicLibrary::libCallbacks.calloc(PmpInternal::DynamicLibrary::libCallbacks.handle, nmemb, size)
#define realloc(ptr, size)             PmpInternal::DynamicLibrary::libCallbacks.realloc(PmpInternal::DynamicLibrary::libCallbacks.handle, ptr, size)

namespace PmpInternal
{
  namespace DynamicLibrary
  {
    static void ClearDWork(void* ptr, int value, size_t num);
    struct SNamedSignalInfo
    {
      const char * Name;
      PmpInternal::DynamicLibrary::SSignalInfo Info;
    };

    struct SNamedEventInfo
    {
      const char * Name;
      PmpInternal::DynamicLibrary::SEventInfo Info;
    };

    struct CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor: public
      PmpInternal::DynamicLibrary::ISimulink
    {
      SEventSet events;
      void * modelData;
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor(void * modelData);
      void * operator new(size_t size)
      {
        return malloc(size);
      }

      void operator delete(void * p)
      {
        free(p);
      }
    };

    static void
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_SetInputsDataAddress
      (PmpInternal::DynamicLibrary::ISimulink* intf, void* address)
    {
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor* self =
        static_cast<CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor* >
        (intf);
      rtmSetU((RT_MODEL_PIDcontroller4CoreCentralizedTestReadyMotor_T*)
              self->modelData,
              (ExtU_PIDcontroller4CoreCentralizedTestReadyMotor_T*) address);
    }

    static void
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_SetOutputsDataAddress
      (PmpInternal::DynamicLibrary::ISimulink* intf, void* address)
    {
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor* self =
        static_cast<CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor*>
        (intf);
      rtmSetY((RT_MODEL_PIDcontroller4CoreCentralizedTestReadyMotor_T*)
              self->modelData,
              (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T*) address);
    }

    static void
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_SetTestpointsDataAddress
      (PmpInternal::DynamicLibrary::ISimulink* intf, void* address)
    {
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor* self =
        static_cast<CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor*>
        (intf);
      rtmSetBlockIO((RT_MODEL_PIDcontroller4CoreCentralizedTestReadyMotor_T*)
                    self->modelData,
                    (B_PIDcontroller4CoreCentralizedTestReadyMotor_T*) address);
    }

    static void
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_SetUpdatableDataAddress
      (PmpInternal::DynamicLibrary::ISimulink*, const char*, void*)
    {
    }

    static void
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_SetModelUpdatableDefaults
      (PmpInternal::DynamicLibrary::ISimulink*, void*)
    {
    }

    static void
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_SetParametersDataAddress
      (PmpInternal::DynamicLibrary::ISimulink* intf, void* address)
    {
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor* self =
        static_cast<CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor*>
        (intf);
      rtmSetPIDcontroller4CoreCentralizedTestReadyMotor_InstP_ref
        ((RT_MODEL_PIDcontroller4CoreCentralizedTestReadyMotor_T*)
         self->modelData, (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T*)
         address);

      // Copy in default parameter data
      (void) memcpy(rtmGetPIDcontroller4CoreCentralizedTestReadyMotor_InstP_ref
                    ((RT_MODEL_PIDcontroller4CoreCentralizedTestReadyMotor_T*)
                     self->modelData),
                    &PIDcontroller4CoreCentralizedTestReadyMotor_InstP, sizeof
                    (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T));
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_SetModelUpdatableDefaults
        (self, self->modelData);
    }

    static void
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_SetEventsDataAddress
      (PmpInternal::DynamicLibrary::ISimulink*, void*)
    {
    }

    static uint32_t
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetStateDataSize
      (PmpInternal::DynamicLibrary::ISimulink*)
    {
      return sizeof(DW_PIDcontroller4CoreCentralizedTestReadyMotor_T);
    }

    static void
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_SetStateDataAddress
      (PmpInternal::DynamicLibrary::ISimulink* intf, void* address)
    {
      memset(address, 0,
             CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetStateDataSize
             (intf));
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor* self =
        static_cast<CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor*>
        (intf);
      rtmSetRootDWork((RT_MODEL_PIDcontroller4CoreCentralizedTestReadyMotor_T*)
                      self->modelData,
                      (DW_PIDcontroller4CoreCentralizedTestReadyMotor_T*)
                      address);
    }

    static void CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_Init
      (PmpInternal::DynamicLibrary::ISimulink* intf, void* handle)
    {
      PmpInternal::DynamicLibrary::libCallbacks.handle = handle;
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor* self =
        static_cast<CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor*>
        (intf);
      RT_MODEL_PIDcontroller4CoreCentralizedTestReadyMotor_T
        * PIDcontroller4CoreCentralizedTestReadyMotor_M =
        (RT_MODEL_PIDcontroller4CoreCentralizedTestReadyMotor_T*)
        self->modelData;
      B_PIDcontroller4CoreCentralizedTestReadyMotor_T
        *PIDcontroller4CoreCentralizedTestReadyMotor_B =
        PIDcontroller4CoreCentralizedTestReadyMotor_M->blockIO;
      DW_PIDcontroller4CoreCentralizedTestReadyMotor_T
        *PIDcontroller4CoreCentralizedTestReadyMotor_DW =
        PIDcontroller4CoreCentralizedTestReadyMotor_M->dwork;
      PrevZCX_PIDcontroller4CoreCentralizedTestReadyMotor_T
        *PIDcontroller4CoreCentralizedTestReadyMotor_PrevZCX =
        PIDcontroller4CoreCentralizedTestReadyMotor_M->prevZCSigState;
      ExtU_PIDcontroller4CoreCentralizedTestReadyMotor_T
        *PIDcontroller4CoreCentralizedTestReadyMotor_U =
        (ExtU_PIDcontroller4CoreCentralizedTestReadyMotor_T *)
        PIDcontroller4CoreCentralizedTestReadyMotor_M->inputs;
      ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T
        *PIDcontroller4CoreCentralizedTestReadyMotor_Y =
        (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T *)
        PIDcontroller4CoreCentralizedTestReadyMotor_M->outputs;

      /* initialize non-finites */
      rt_InitInfAndNaN(sizeof(real_T));
      rtsiSetSimTimeStep
        (PIDcontroller4CoreCentralizedTestReadyMotor_M->solverInfo,
         MAJOR_TIME_STEP);
      rtmSetTPtr(PIDcontroller4CoreCentralizedTestReadyMotor_M,
                 &PIDcontroller4CoreCentralizedTestReadyMotor_M->Timing.tArray[0]);
      PIDcontroller4CoreCentralizedTestReadyMotor_M->Timing.stepSize0 = 0.00025;

      /* block I/O */
      (void) memset(((void *) PIDcontroller4CoreCentralizedTestReadyMotor_B), 0,
                    sizeof(B_PIDcontroller4CoreCentralizedTestReadyMotor_T));

      {
        int32_T i;
        for (i = 0; i < 30; i++) {
          PIDcontroller4CoreCentralizedTestReadyMotor_B->Flip1[i] = 0.0;
        }

        for (i = 0; i < 30; i++) {
          PIDcontroller4CoreCentralizedTestReadyMotor_B->Flip1_c[i] = 0.0;
        }

        for (i = 0; i < 30; i++) {
          PIDcontroller4CoreCentralizedTestReadyMotor_B->Flip1_p[i] = 0.0;
        }

        for (i = 0; i < 30; i++) {
          PIDcontroller4CoreCentralizedTestReadyMotor_B->Flip1_o[i] = 0.0;
        }

        for (i = 0; i < 6; i++) {
          PIDcontroller4CoreCentralizedTestReadyMotor_B->
            Output_n.DataStoreRead[i] = 0.0;
        }

        for (i = 0; i < 6; i++) {
          PIDcontroller4CoreCentralizedTestReadyMotor_B->Output.DataStoreRead[i]
            = 0.0;
        }

        PIDcontroller4CoreCentralizedTestReadyMotor_B->Tsamp = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Tsamp_b = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Product1 = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Gain = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Subtract5 = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Delay1[0] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Delay1[1] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Delay1[2] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Delay1[3] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Tsamp_k = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->DiscreteTimeIntegrator =
          0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->y_i1 = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch1 = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch1_j = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch1_e = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch1_a = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch1_h = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Delay2[0] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Delay2[1] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Delay2[2] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch_n[0] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch_n[1] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch_n[2] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch_n[3] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Gain_h = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch1_o = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch1_g = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch_k = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch1_d = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Gravity = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Gain1 = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch2_o = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Add = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Gain4 = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Add2 = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Tom = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch1_n = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch_c = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Add1_l = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Tomm = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Add4 = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Add5 = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Tom_h = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Tomm_d = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Subtract1 = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch2_g[0] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch2_g[1] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch2_g[2] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->error = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->NProdOut = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Divide1 = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Subtract5_o = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch_o = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Tsamp_m = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->setpointpitch = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Gain2 = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->NProdOut_e = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Product = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Subtract5_l = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch_p = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Tsamp_h = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->setpointroll = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Gain2_e = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->NProdOut_k = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Product_h = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Max = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Subtract4 = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch2_i = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Max_j = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Subtract4_d = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch2_ot = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Max_b = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Subtract4_a = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch2_c = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Max_i = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Subtract4_n = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch2_a = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Sum1 = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Delay1_i = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Delay = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch4 = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch6 = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch3 = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch5 = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch7 = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Delay1_b = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Delay_o = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch4_g = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch6_a = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch3_h = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch5_c = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch7_h = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Delay1_h = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Delay_g = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch4_n = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch6_j = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch3_m = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch5_d = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch7_e = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Delay1_n = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Delay_f = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch4_f = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch6_b = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch3_p = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch5_g = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch7_p = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch_l = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->error_h = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->SumI4 = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch_j = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->SumI4_c = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch_d = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->SumI4_o = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Gain_g = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch_e[0] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch_e[1] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch_e[2] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch_e[3] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch1_eg = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch2_k = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Delay_m = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Delay1_j = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Delay2_n = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Gain1_k = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Gain2_d = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Gain3 = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Gain_l = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Saturation = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Gain2_c = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Gain5 = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Gain6 = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Subtract = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->TmpSignalConversionAtDelay1Inport1
          [0] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->TmpSignalConversionAtDelay1Inport1
          [1] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->TmpSignalConversionAtDelay1Inport1
          [2] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->TmpSignalConversionAtDelay1Inport1
          [3] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->TmpSignalConversionAtDelay2Inport1
          [0] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->TmpSignalConversionAtDelay2Inport1
          [1] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->TmpSignalConversionAtDelay2Inport1
          [2] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Product_i[0] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Product_i[1] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Product_i[2] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Product1_l = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Product2 = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->SumI4_g = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->SumI4_k = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->Switch3_h5 = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->sf_Caprequestedcurrent3.out_req_I
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->sf_Caprequestedcurrent2.out_req_I
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->sf_Caprequestedcurrent1.out_req_I
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage_ka.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage_kw.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage_h.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage1_g.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage_k.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage1_pnaevvfpgh5zzhe.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage_f.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage1_pnaevvfpgh5zzh.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage_n.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage1_pnaevvfpgh5zz.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage_e.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage1_pnaevvfpgh5z.MovingAverage
          [0] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage1_pnaevvfpgh5z.MovingAverage
          [1] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage1_pnaevvfpgh5z.MovingAverage
          [2] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage_c.MovingAverage
          [0] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage_c.MovingAverage
          [1] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage_c.MovingAverage
          [2] = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage2.MovingAverage1
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage1_pnaevvfpgh5.MovingAverage1
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage1_pnaevvfpgh.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage_pnaevvfpgh5zzhe.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage_pnaevvfpgh5zzh.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage1_pnaevvfp.MovingAverage1
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->sf_FindCoordinates_d.avg_g
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->sf_FindCoordinates_d.pitch
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->sf_FindCoordinates_d.roll
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage_pnaevvfpgh5zz.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage_pnaevvfpgh5z.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage_pnaevvfpgh5.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage1_pnaevvf.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage_pnaevvfpgh.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage1_pnaevv.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage_pnaevvfpg.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage1_pnaev.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage_pnaevvfp.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage1_pnae.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage_pnaevvf.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->sf_FindCoordinates.avg_g =
          0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->sf_FindCoordinates.pitch =
          0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->sf_FindCoordinates.roll =
          0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage_pnaevv.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage_pnaev.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage_pnae.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage1_pna.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage_pna.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage1_pn.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage_pn.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage1_p.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage_p.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage1.MovingAverage
          = 0.0;
        PIDcontroller4CoreCentralizedTestReadyMotor_B->MovingAverage.MovingAverage
          = 0.0;
      }

      /* states (dwork) */
      (void) ClearDWork((void *)PIDcontroller4CoreCentralizedTestReadyMotor_DW,
                        0,
                        sizeof(DW_PIDcontroller4CoreCentralizedTestReadyMotor_T));
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay1_DSTATE = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Integrator_DSTATE = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->UD_DSTATE = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Integrator_DSTATE_j = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->UD_DSTATE_p = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator_DSTATE
        = 0.0;

      {
        int32_T i;
        for (i = 0; i < 1600; i++) {
          PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay1_DSTATE_e[i] =
            0.0;
        }
      }

      {
        int32_T i;
        for (i = 0; i < 1600; i++) {
          PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay_DSTATE[i] = 0.0;
        }
      }

      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay1_DSTATE_ez[0] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay1_DSTATE_ez[1] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay1_DSTATE_ez[2] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay1_DSTATE_ez[3] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Integrator_DSTATE_jc = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->UD_DSTATE_f = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator1_DSTATE
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator_DSTATE_b
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator_DSTATE_l
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator_DSTATE_a
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay1_DSTATE_a = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay_DSTATE_d = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay2_DSTATE[0] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay2_DSTATE[1] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay2_DSTATE[2] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator3_DSTATE
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator_DSTATE_p
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator1_DSTATE_k
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator2_DSTATE
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator1_DSTATE_g
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator2_DSTATE_l
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator_DSTATE_o
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Integrator_DSTATE_n = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Filter_DSTATE = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Integrator_DSTATE_l = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->UD_DSTATE_o = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator1_DSTATE_b
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Integrator_DSTATE_c = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Filter_DSTATE_i = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Integrator_DSTATE_lg = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->UD_DSTATE_l = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator1_DSTATE_l
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Integrator_DSTATE_lw = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Filter_DSTATE_h = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay3_DSTATE = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay2_DSTATE_l = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay3_DSTATE_m = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay2_DSTATE_b = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay3_DSTATE_i = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay2_DSTATE_g = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay3_DSTATE_o = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay2_DSTATE_bo = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator_DSTATE_i
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay1_DSTATE_c = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator_DSTATE_g
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay_DSTATE_d0[0] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay_DSTATE_d0[1] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator1_DSTATE_c
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay1_DSTATE_au = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator_DSTATE_h
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay_DSTATE_e[0] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay_DSTATE_e[1] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator1_DSTATE_d
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay1_DSTATE_l = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator_DSTATE_gr
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay_DSTATE_i[0] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay_DSTATE_i[1] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator1_DSTATE_e
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay1_DSTATE_g = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator_DSTATE_op
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay_DSTATE_k[0] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay_DSTATE_k[1] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator1_DSTATE_h
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator_DSTATE_it
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator_DSTATE_j
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator_DSTATE_in
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay_DSTATE_c = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay1_DSTATE_n = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->Delay2_DSTATE_c = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator1_DSTATE_ll
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator3_DSTATE_g
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->DiscreteTimeIntegrator4_DSTATE
        = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->TimeStampA = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->LastUAtTimeA[0] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->LastUAtTimeA[1] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->LastUAtTimeA[2] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->TimeStampB = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->LastUAtTimeB[0] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->LastUAtTimeB[1] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->LastUAtTimeB[2] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->TimeStampA_l = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->LastUAtTimeA_g[0] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->LastUAtTimeA_g[1] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->LastUAtTimeA_g[2] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->TimeStampB_b = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->LastUAtTimeB_l[0] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->LastUAtTimeB_l[1] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_DW->LastUAtTimeB_l[2] = 0.0;

      {
        int32_T i;
        for (i = 0; i < 36; i++) {
          PIDcontroller4CoreCentralizedTestReadyMotor_DW->P[i] = 0.0;
        }
      }

      {
        int32_T i;
        for (i = 0; i < 6; i++) {
          PIDcontroller4CoreCentralizedTestReadyMotor_DW->x[i] = 0.0;
        }
      }

      {
        int32_T i;
        for (i = 0; i < 36; i++) {
          PIDcontroller4CoreCentralizedTestReadyMotor_DW->P_h[i] = 0.0;
        }
      }

      {
        int32_T i;
        for (i = 0; i < 6; i++) {
          PIDcontroller4CoreCentralizedTestReadyMotor_DW->x_n[i] = 0.0;
        }
      }

      /* external inputs */
      PIDcontroller4CoreCentralizedTestReadyMotor_U->G_A = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_U->G_B = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_U->G_C = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_U->G_D = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_U->I_A_m = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_U->I_B_m = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_U->I_C_m = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_U->I_D_m = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_U->VerticalAxisState = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_U->Vr1 = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_U->Vr2 = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_U->Vr3 = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_U->Vr4 = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_U->Vt1 = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_U->Vt2 = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_U->Vt3 = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_U->Vt4 = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_U->EMS_F_Front = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_U->EMS_F_Back = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_U->LS_mode = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_U->IMU_z = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_U->IMU_pitch = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_U->IMU_roll = 0.0;

      /* external outputs */
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->I_A = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->ActualReferenceAirgap = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->Mode = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->Airgap = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->Acceleration[0] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->Acceleration[1] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->Acceleration[2] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->CalculatedForce[0] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->CalculatedForce[1] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->CalculatedForce[2] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->Speed[0] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->Speed[1] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->Speed[2] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->I_B = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->I_C = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->I_D = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->Pitch = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->Roll = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->G_Factor = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->P_Factor = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->R_Factor = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->Linpos[0] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->Linpos[1] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->Linpos[2] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->Linpos[3] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->Filtered_Gaps[0] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->Filtered_Gaps[1] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->Filtered_Gaps[2] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->Filtered_Gaps[3] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->PitchError = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->BeamErrorOutput[0] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->BeamErrorOutput[1] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->BeamErrorOutput[2] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->ControlSIgnals[0] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->ControlSIgnals[1] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->ControlSIgnals[2] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->ExternalForces[0] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->ExternalForces[1] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->ExternalForces[2] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->HEMSForces[0] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->HEMSForces[1] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->HEMSForces[2] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->HEMSForces[3] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->motorfrontback[0] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->motorfrontback[1] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->RefPitchOut = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->RefRollOut = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->DataBeforeKalman[0] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->DataBeforeKalman[1] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->DataBeforeKalman[2] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->Power = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->Power_avg = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->Energy = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->CalculatedTPR[0] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->CalculatedTPR[1] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->CalculatedTPR[2] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->Arms[0] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->Arms[1] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->Arms[2] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->CalculatedMass = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->MotorAGAdjust = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->IMU_kalman_output[0] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->IMU_kalman_output[1] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->IMU_kalman_output[2] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->MMOI[0] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->MMOI[1] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->MMOI[2] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->PIDD = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->F_Mismatch = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->Kalman_Output[0] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->Kalman_Output[1] = 0.0;
      PIDcontroller4CoreCentralizedTestReadyMotor_Y->Kalman_Output[2] = 0.0;

      /* previous zero-crossing states */
      {
        PIDcontroller4CoreCentralizedTestReadyMotor_PrevZCX->UD_Reset_ZCE =
          UNINITIALIZED_ZCSIG;
        PIDcontroller4CoreCentralizedTestReadyMotor_PrevZCX->UD_Reset_ZCE_g =
          UNINITIALIZED_ZCSIG;
        PIDcontroller4CoreCentralizedTestReadyMotor_PrevZCX->UD_Reset_ZCE_a =
          UNINITIALIZED_ZCSIG;
        PIDcontroller4CoreCentralizedTestReadyMotor_PrevZCX->UD_Reset_ZCE_n =
          UNINITIALIZED_ZCSIG;
        PIDcontroller4CoreCentralizedTestReadyMotor_PrevZCX->UD_Reset_ZCE_k =
          UNINITIALIZED_ZCSIG;
      }

      PIDcontroller4CoreCentralizedTestReadyMotor_initialize
        ((RT_MODEL_PIDcontroller4CoreCentralizedTestReadyMotor_T*)
         self->modelData);
    }

    static void CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_Output
      (PmpInternal::DynamicLibrary::ISimulink* intf)
    {
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor* self =
        static_cast<CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor*>
        (intf);
      PIDcontroller4CoreCentralizedTestReadyMotor_output
        ((RT_MODEL_PIDcontroller4CoreCentralizedTestReadyMotor_T*)
         self->modelData);
    }

    static void CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_Update
      (PmpInternal::DynamicLibrary::ISimulink* intf)
    {
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor* self =
        static_cast<CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor*>
        (intf);
      PIDcontroller4CoreCentralizedTestReadyMotor_update
        ((RT_MODEL_PIDcontroller4CoreCentralizedTestReadyMotor_T*)
         self->modelData);
    }

    static void
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_Terminate
      (PmpInternal::DynamicLibrary::ISimulink* intf)
    {
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor* self =
        static_cast<CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor*>
        (intf);
      free(self->modelData);
    }

    static uint32_t
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetInputsDataSize
      (PmpInternal::DynamicLibrary::ISimulink*)
    {
      return sizeof(ExtU_PIDcontroller4CoreCentralizedTestReadyMotor_T);
    }

    static uint32_t
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetOutputsDataSize
      (PmpInternal::DynamicLibrary::ISimulink*)
    {
      return sizeof(ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T);
    }

    static uint32_t
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetTestpointsDataSize
      (PmpInternal::DynamicLibrary::ISimulink*)
    {
      return sizeof(B_PIDcontroller4CoreCentralizedTestReadyMotor_T);
    }

    static uint32_t
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetParametersDataSize
      (PmpInternal::DynamicLibrary::ISimulink* )
    {
      return sizeof(InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T);
    }

    static uint32_t
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetUpdatableDataSize
      (PmpInternal::DynamicLibrary::ISimulink*, const char*)
    {
      return 0;
    }

    static uint32_t
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetEventsDataSize
      (PmpInternal::DynamicLibrary::ISimulink*)
    {
      return 0;
    }

    static const SNamedSignalInfo inputOffsets[23] = {
      { "G_A", { ESimulinkStructsInput, offsetof
          (ExtU_PIDcontroller4CoreCentralizedTestReadyMotor_T, G_A),
          EDataTypeDouble } },

      { "G_B", { ESimulinkStructsInput, offsetof
          (ExtU_PIDcontroller4CoreCentralizedTestReadyMotor_T, G_B),
          EDataTypeDouble } },

      { "G_C", { ESimulinkStructsInput, offsetof
          (ExtU_PIDcontroller4CoreCentralizedTestReadyMotor_T, G_C),
          EDataTypeDouble } },

      { "G_D", { ESimulinkStructsInput, offsetof
          (ExtU_PIDcontroller4CoreCentralizedTestReadyMotor_T, G_D),
          EDataTypeDouble } },

      { "I_A_m", { ESimulinkStructsInput, offsetof
          (ExtU_PIDcontroller4CoreCentralizedTestReadyMotor_T, I_A_m),
          EDataTypeDouble } },

      { "I_B_m", { ESimulinkStructsInput, offsetof
          (ExtU_PIDcontroller4CoreCentralizedTestReadyMotor_T, I_B_m),
          EDataTypeDouble } },

      { "I_C_m", { ESimulinkStructsInput, offsetof
          (ExtU_PIDcontroller4CoreCentralizedTestReadyMotor_T, I_C_m),
          EDataTypeDouble } },

      { "I_D_m", { ESimulinkStructsInput, offsetof
          (ExtU_PIDcontroller4CoreCentralizedTestReadyMotor_T, I_D_m),
          EDataTypeDouble } },

      { "VerticalAxisState", { ESimulinkStructsInput, offsetof
          (ExtU_PIDcontroller4CoreCentralizedTestReadyMotor_T, VerticalAxisState),
          EDataTypeDouble } },

      { "Vr1", { ESimulinkStructsInput, offsetof
          (ExtU_PIDcontroller4CoreCentralizedTestReadyMotor_T, Vr1),
          EDataTypeDouble } },

      { "Vr2", { ESimulinkStructsInput, offsetof
          (ExtU_PIDcontroller4CoreCentralizedTestReadyMotor_T, Vr2),
          EDataTypeDouble } },

      { "Vr3", { ESimulinkStructsInput, offsetof
          (ExtU_PIDcontroller4CoreCentralizedTestReadyMotor_T, Vr3),
          EDataTypeDouble } },

      { "Vr4", { ESimulinkStructsInput, offsetof
          (ExtU_PIDcontroller4CoreCentralizedTestReadyMotor_T, Vr4),
          EDataTypeDouble } },

      { "Vt1", { ESimulinkStructsInput, offsetof
          (ExtU_PIDcontroller4CoreCentralizedTestReadyMotor_T, Vt1),
          EDataTypeDouble } },

      { "Vt2", { ESimulinkStructsInput, offsetof
          (ExtU_PIDcontroller4CoreCentralizedTestReadyMotor_T, Vt2),
          EDataTypeDouble } },

      { "Vt3", { ESimulinkStructsInput, offsetof
          (ExtU_PIDcontroller4CoreCentralizedTestReadyMotor_T, Vt3),
          EDataTypeDouble } },

      { "Vt4", { ESimulinkStructsInput, offsetof
          (ExtU_PIDcontroller4CoreCentralizedTestReadyMotor_T, Vt4),
          EDataTypeDouble } },

      { "EMS_F_Front", { ESimulinkStructsInput, offsetof
          (ExtU_PIDcontroller4CoreCentralizedTestReadyMotor_T, EMS_F_Front),
          EDataTypeDouble } },

      { "EMS_F_Back", { ESimulinkStructsInput, offsetof
          (ExtU_PIDcontroller4CoreCentralizedTestReadyMotor_T, EMS_F_Back),
          EDataTypeDouble } },

      { "LS_mode", { ESimulinkStructsInput, offsetof
          (ExtU_PIDcontroller4CoreCentralizedTestReadyMotor_T, LS_mode),
          EDataTypeDouble } },

      { "IMU_z", { ESimulinkStructsInput, offsetof
          (ExtU_PIDcontroller4CoreCentralizedTestReadyMotor_T, IMU_z),
          EDataTypeDouble } },

      { "IMU_pitch", { ESimulinkStructsInput, offsetof
          (ExtU_PIDcontroller4CoreCentralizedTestReadyMotor_T, IMU_pitch),
          EDataTypeDouble } },

      { "IMU_roll", { ESimulinkStructsInput, offsetof
          (ExtU_PIDcontroller4CoreCentralizedTestReadyMotor_T, IMU_roll),
          EDataTypeDouble } },
    };

    static EResult
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetInputInfo
      (PmpInternal::DynamicLibrary::ISimulink*, const char* name, SSignalInfo&
       info)
    {
      for (unsigned int i = 0; i < 23; ++i) {
        if (strcmp(name, inputOffsets[i].Name) == 0) {
          info = inputOffsets[i].Info;
          return EResultOk;
        }
      }

      return EResultNonExistant;
    }

    static const SNamedSignalInfo outputOffsets[72] = {
      { "I_A", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, I_A),
          EDataTypeDouble } },

      { "ActualReferenceAirgap", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           ActualReferenceAirgap), EDataTypeDouble } },

      { "Mode", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, Mode),
          EDataTypeDouble } },

      { "Airgap", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, Airgap),
          EDataTypeDouble } },

      { "Acceleration_0", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, Acceleration[0]),
          EDataTypeDouble } },

      { "Acceleration_1", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, Acceleration[1]),
          EDataTypeDouble } },

      { "Acceleration_2", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, Acceleration[2]),
          EDataTypeDouble } },

      { "CalculatedForce_0", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, CalculatedForce[0]),
          EDataTypeDouble } },

      { "CalculatedForce_1", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, CalculatedForce[1]),
          EDataTypeDouble } },

      { "CalculatedForce_2", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, CalculatedForce[2]),
          EDataTypeDouble } },

      { "Speed_0", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, Speed[0]),
          EDataTypeDouble } },

      { "Speed_1", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, Speed[1]),
          EDataTypeDouble } },

      { "Speed_2", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, Speed[2]),
          EDataTypeDouble } },

      { "I_B", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, I_B),
          EDataTypeDouble } },

      { "I_C", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, I_C),
          EDataTypeDouble } },

      { "I_D", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, I_D),
          EDataTypeDouble } },

      { "Pitch", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, Pitch),
          EDataTypeDouble } },

      { "Roll", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, Roll),
          EDataTypeDouble } },

      { "G_Factor", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, G_Factor),
          EDataTypeDouble } },

      { "P_Factor", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, P_Factor),
          EDataTypeDouble } },

      { "R_Factor", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, R_Factor),
          EDataTypeDouble } },

      { "Linpos_0", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, Linpos[0]),
          EDataTypeDouble } },

      { "Linpos_1", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, Linpos[1]),
          EDataTypeDouble } },

      { "Linpos_2", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, Linpos[2]),
          EDataTypeDouble } },

      { "Linpos_3", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, Linpos[3]),
          EDataTypeDouble } },

      { "Filtered_Gaps_0", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, Filtered_Gaps[0]),
          EDataTypeDouble } },

      { "Filtered_Gaps_1", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, Filtered_Gaps[1]),
          EDataTypeDouble } },

      { "Filtered_Gaps_2", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, Filtered_Gaps[2]),
          EDataTypeDouble } },

      { "Filtered_Gaps_3", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, Filtered_Gaps[3]),
          EDataTypeDouble } },

      { "PitchError", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, PitchError),
          EDataTypeDouble } },

      { "BeamErrorOutput_0", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, BeamErrorOutput[0]),
          EDataTypeDouble } },

      { "BeamErrorOutput_1", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, BeamErrorOutput[1]),
          EDataTypeDouble } },

      { "BeamErrorOutput_2", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, BeamErrorOutput[2]),
          EDataTypeDouble } },

      { "ControlSIgnals_0", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, ControlSIgnals[0]),
          EDataTypeDouble } },

      { "ControlSIgnals_1", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, ControlSIgnals[1]),
          EDataTypeDouble } },

      { "ControlSIgnals_2", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, ControlSIgnals[2]),
          EDataTypeDouble } },

      { "ExternalForces_0", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, ExternalForces[0]),
          EDataTypeDouble } },

      { "ExternalForces_1", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, ExternalForces[1]),
          EDataTypeDouble } },

      { "ExternalForces_2", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, ExternalForces[2]),
          EDataTypeDouble } },

      { "HEMSForces_0", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, HEMSForces[0]),
          EDataTypeDouble } },

      { "HEMSForces_1", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, HEMSForces[1]),
          EDataTypeDouble } },

      { "HEMSForces_2", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, HEMSForces[2]),
          EDataTypeDouble } },

      { "HEMSForces_3", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, HEMSForces[3]),
          EDataTypeDouble } },

      { "motorfrontback_0", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, motorfrontback[0]),
          EDataTypeDouble } },

      { "motorfrontback_1", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, motorfrontback[1]),
          EDataTypeDouble } },

      { "RefPitchOut", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, RefPitchOut),
          EDataTypeDouble } },

      { "RefRollOut", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, RefRollOut),
          EDataTypeDouble } },

      { "DataBeforeKalman_0", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, DataBeforeKalman
           [0]), EDataTypeDouble } },

      { "DataBeforeKalman_1", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, DataBeforeKalman
           [1]), EDataTypeDouble } },

      { "DataBeforeKalman_2", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, DataBeforeKalman
           [2]), EDataTypeDouble } },

      { "Power", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, Power),
          EDataTypeDouble } },

      { "Power_avg", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, Power_avg),
          EDataTypeDouble } },

      { "Energy", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, Energy),
          EDataTypeDouble } },

      { "CalculatedTPR_0", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, CalculatedTPR[0]),
          EDataTypeDouble } },

      { "CalculatedTPR_1", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, CalculatedTPR[1]),
          EDataTypeDouble } },

      { "CalculatedTPR_2", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, CalculatedTPR[2]),
          EDataTypeDouble } },

      { "Arms_0", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, Arms[0]),
          EDataTypeDouble } },

      { "Arms_1", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, Arms[1]),
          EDataTypeDouble } },

      { "Arms_2", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, Arms[2]),
          EDataTypeDouble } },

      { "CalculatedMass", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, CalculatedMass),
          EDataTypeDouble } },

      { "MotorAGAdjust", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, MotorAGAdjust),
          EDataTypeDouble } },

      { "IMU_kalman_output_0", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           IMU_kalman_output[0]), EDataTypeDouble } },

      { "IMU_kalman_output_1", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           IMU_kalman_output[1]), EDataTypeDouble } },

      { "IMU_kalman_output_2", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           IMU_kalman_output[2]), EDataTypeDouble } },

      { "MMOI_0", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, MMOI[0]),
          EDataTypeDouble } },

      { "MMOI_1", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, MMOI[1]),
          EDataTypeDouble } },

      { "MMOI_2", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, MMOI[2]),
          EDataTypeDouble } },

      { "PIDD", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, PIDD),
          EDataTypeDouble } },

      { "F_Mismatch", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, F_Mismatch),
          EDataTypeDouble } },

      { "Kalman_Output_0", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, Kalman_Output[0]),
          EDataTypeDouble } },

      { "Kalman_Output_1", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, Kalman_Output[1]),
          EDataTypeDouble } },

      { "Kalman_Output_2", { ESimulinkStructsOutput, offsetof
          (ExtY_PIDcontroller4CoreCentralizedTestReadyMotor_T, Kalman_Output[2]),
          EDataTypeDouble } },
    };

    static EResult
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetOutputInfo
      (PmpInternal::DynamicLibrary::ISimulink*, const char* name, SSignalInfo&
       info)
    {
      for (unsigned int i = 0; i < 72; ++i) {
        if (strcmp(name, outputOffsets[i].Name) == 0) {
          info = outputOffsets[i].Info;
          return EResultOk;
        }
      }

      return EResultNonExistant;
    }

    static EResult
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetTestpointInfo
      (PmpInternal::DynamicLibrary::ISimulink*, const char*, SSignalInfo&)
    {
      return EResultNonExistant;
    }

    static const SNamedSignalInfo parameterOffsets[124] = {
      { "AirgapFilter", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, AirgapFilter),
          EDataTypeDouble } },

      { "Airgap_GainSchedulingEnabled_0", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           Airgap_GainSchedulingEnabled[0]), EDataTypeDouble } },

      { "Airgap_GainSchedulingEnabled_1", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           Airgap_GainSchedulingEnabled[1]), EDataTypeDouble } },

      { "Airgap_GainSchedulingEnabled_2", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           Airgap_GainSchedulingEnabled[2]), EDataTypeDouble } },

      { "Airgap_GainSchedulingEnabled_3", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           Airgap_GainSchedulingEnabled[3]), EDataTypeDouble } },

      { "Airgap_GainSchedulingEnabled_4", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           Airgap_GainSchedulingEnabled[4]), EDataTypeDouble } },

      { "BaseRefAirgap", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, BaseRefAirgap),
          EDataTypeDouble } },

      { "BeamErrorTime", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, BeamErrorTime),
          EDataTypeDouble } },

      { "BeamOffsets", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, BeamOffsets),
          EDataTypeDouble } },

      { "BeamOffsetsBackDelay", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           BeamOffsetsBackDelay), EDataTypeDouble } },

      { "BeamOffsetsFactor", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           BeamOffsetsFactor), EDataTypeDouble } },

      { "CoMIntegrals_0", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, CoMIntegrals[0]),
          EDataTypeDouble } },

      { "CoMIntegrals_1", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, CoMIntegrals[1]),
          EDataTypeDouble } },

      { "CoMIntegrals_2", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, CoMIntegrals[2]),
          EDataTypeDouble } },

      { "CurrentIntegralAG", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           CurrentIntegralAG), EDataTypeDouble } },

      { "CurrentIntegralP", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, CurrentIntegralP),
          EDataTypeDouble } },

      { "CurrentIntegralR", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, CurrentIntegralR),
          EDataTypeDouble } },

      { "DoubleFilter", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, DoubleFilter),
          EDataTypeDouble } },

      { "EMSRollIntegral", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, EMSRollIntegral),
          EDataTypeDouble } },

      { "EMS_Moment_Arm_Z", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, EMS_Moment_Arm_Z),
          EDataTypeDouble } },

      { "F_array_0", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, F_array[0]),
          EDataTypeDouble } },

      { "F_array_1", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, F_array[1]),
          EDataTypeDouble } },

      { "ForgettingFactor", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, ForgettingFactor),
          EDataTypeDouble } },

      { "ForgettingFactorAirgap", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           ForgettingFactorAirgap), EDataTypeDouble } },

      { "ForgettingFactorLinpos", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           ForgettingFactorLinpos), EDataTypeDouble } },

      { "ForgettingFactorPitch", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           ForgettingFactorPitch), EDataTypeDouble } },

      { "ForgettingFactorRoll", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           ForgettingFactorRoll), EDataTypeDouble } },

      { "G_K_d", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, G_K_d),
          EDataTypeDouble } },

      { "G_K_d_LS", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, G_K_d_LS),
          EDataTypeDouble } },

      { "G_K_i", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, G_K_i),
          EDataTypeDouble } },

      { "G_K_i_LS", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, G_K_i_LS),
          EDataTypeDouble } },

      { "G_K_p", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, G_K_p),
          EDataTypeDouble } },

      { "G_K_p_LS", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, G_K_p_LS),
          EDataTypeDouble } },

      { "G_T_c", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, G_T_c),
          EDataTypeDouble } },

      { "HEMS_Plane_Offsets_0", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           HEMS_Plane_Offsets[0]), EDataTypeDouble } },

      { "HEMS_Plane_Offsets_1", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           HEMS_Plane_Offsets[1]), EDataTypeDouble } },

      { "HEMS_Plane_Offsets_2", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           HEMS_Plane_Offsets[2]), EDataTypeDouble } },

      { "HEMS_Plane_Offsets_3", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           HEMS_Plane_Offsets[3]), EDataTypeDouble } },

      { "IMU_integration_gain", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           IMU_integration_gain), EDataTypeDouble } },

      { "Kalman_F", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, Kalman_F),
          EDataTypeDouble } },

      { "Kalman_I", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, Kalman_I),
          EDataTypeDouble } },

      { "Kalman_P", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, Kalman_P),
          EDataTypeDouble } },

      { "Kalman_R", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, Kalman_R),
          EDataTypeDouble } },

      { "LandingAirgap", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, LandingAirgap),
          EDataTypeDouble } },

      { "LandingTime", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, LandingTime),
          EDataTypeDouble } },

      { "LinposFilter", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, LinposFilter),
          EDataTypeDouble } },

      { "LinposOn", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, LinposOn),
          EDataTypeDouble } },

      { "LowAirgapPropellingSwitch", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           LowAirgapPropellingSwitch), EDataTypeDouble } },

      { "M_f", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, M_f),
          EDataTypeDouble } },

      { "Mass", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, Mass),
          EDataTypeDouble } },

      { "MeasureCurrent", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, MeasureCurrent),
          EDataTypeDouble } },

      { "MismatchedHEMSKalman", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           MismatchedHEMSKalman), EDataTypeDouble } },

      { "MismatchedHEMSLateral", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           MismatchedHEMSLateral), EDataTypeDouble } },

      { "MismatchingKalmanAGPR_0", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           MismatchingKalmanAGPR[0]), EDataTypeDouble } },

      { "MismatchingKalmanAGPR_1", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           MismatchingKalmanAGPR[1]), EDataTypeDouble } },

      { "MismatchingKalmanAGPR_2", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           MismatchingKalmanAGPR[2]), EDataTypeDouble } },

      { "MotorAGIntegrals", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, MotorAGIntegrals),
          EDataTypeDouble } },

      { "MotorAirgapOffset", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           MotorAirgapOffset), EDataTypeDouble } },

      { "OperatingMode", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, OperatingMode),
          EDataTypeDouble } },

      { "P_K_d", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, P_K_d),
          EDataTypeDouble } },

      { "P_K_d_LS", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, P_K_d_LS),
          EDataTypeDouble } },

      { "P_K_i", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, P_K_i),
          EDataTypeDouble } },

      { "P_K_i_LS", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, P_K_i_LS),
          EDataTypeDouble } },

      { "P_K_p", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, P_K_p),
          EDataTypeDouble } },

      { "P_K_p_LS", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, P_K_p_LS),
          EDataTypeDouble } },

      { "PitchFilter", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, PitchFilter),
          EDataTypeDouble } },

      { "PodHeight", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, PodHeight),
          EDataTypeDouble } },

      { "PodHeightFactor", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, PodHeightFactor),
          EDataTypeDouble } },

      { "PodLength", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, PodLength),
          EDataTypeDouble } },

      { "PodLengthFactor", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, PodLengthFactor),
          EDataTypeDouble } },

      { "PodWidth", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, PodWidth),
          EDataTypeDouble } },

      { "PodWidthFactor", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, PodWidthFactor),
          EDataTypeDouble } },

      { "Polarity", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, Polarity),
          EDataTypeDouble } },

      { "PropellingAirgap", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, PropellingAirgap),
          EDataTypeDouble } },

      { "PropellingPitch", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, PropellingPitch),
          EDataTypeDouble } },

      { "PropellingRoll", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, PropellingRoll),
          EDataTypeDouble } },

      { "PropellingTime", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, PropellingTime),
          EDataTypeDouble } },

      { "PropulsionCurrent", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           PropulsionCurrent), EDataTypeDouble } },

      { "PropulsionOn", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, PropulsionOn),
          EDataTypeDouble } },

      { "PropulsionRampTime", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           PropulsionRampTime), EDataTypeDouble } },

      { "R_K_d", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, R_K_d),
          EDataTypeDouble } },

      { "R_K_d_LS", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, R_K_d_LS),
          EDataTypeDouble } },

      { "R_K_i", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, R_K_i),
          EDataTypeDouble } },

      { "R_K_i_LS", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, R_K_i_LS),
          EDataTypeDouble } },

      { "R_K_p", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, R_K_p),
          EDataTypeDouble } },

      { "R_K_p_LS", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, R_K_p_LS),
          EDataTypeDouble } },

      { "RefPitch", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, RefPitch),
          EDataTypeDouble } },

      { "RefRoll", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, RefRoll),
          EDataTypeDouble } },

      { "ReferenceMass", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, ReferenceMass),
          EDataTypeDouble } },

      { "Reference_P_Inertia", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           Reference_P_Inertia), EDataTypeDouble } },

      { "Reference_R_Inertia", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           Reference_R_Inertia), EDataTypeDouble } },

      { "ResetArms", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, ResetArms),
          EDataTypeDouble } },

      { "RollFilter", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, RollFilter),
          EDataTypeDouble } },

      { "RunTime", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, RunTime),
          EDataTypeDouble } },

      { "SineSwitches_0", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, SineSwitches[0]),
          EDataTypeDouble } },

      { "SineSwitches_1", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, SineSwitches[1]),
          EDataTypeDouble } },

      { "SineSwitches_2", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, SineSwitches[2]),
          EDataTypeDouble } },

      { "SkipKalman", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, SkipKalman),
          EDataTypeDouble } },

      { "StartingAirgap", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, StartingAirgap),
          EDataTypeDouble } },

      { "StartupTime", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, StartupTime),
          EDataTypeDouble } },

      { "Undo_0current", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, Undo_0current),
          EDataTypeDouble } },

      { "UseIMU", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, UseIMU),
          EDataTypeDouble } },

      { "X_Arm_Offset", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, X_Arm_Offset),
          EDataTypeDouble } },

      { "Y_Arm_Offset", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, Y_Arm_Offset),
          EDataTypeDouble } },

      { "kalman_pitchdot_gain", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           kalman_pitchdot_gain), EDataTypeDouble } },

      { "kalman_rolldot_gain", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           kalman_rolldot_gain), EDataTypeDouble } },

      { "kalman_zdotdot_gain", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           kalman_zdotdot_gain), EDataTypeDouble } },

      { "motorforce_on", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, motorforce_on),
          EDataTypeDouble } },

      { "var_ag_IMU", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, var_ag_IMU),
          EDataTypeDouble } },

      { "var_ag_dot", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, var_ag_dot),
          EDataTypeDouble } },

      { "var_ag_proc", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, var_ag_proc),
          EDataTypeDouble } },

      { "var_ag_sens", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, var_ag_sens),
          EDataTypeDouble } },

      { "var_ag_sens_LS", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, var_ag_sens_LS),
          EDataTypeDouble } },

      { "var_pitch_IMU", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, var_pitch_IMU),
          EDataTypeDouble } },

      { "var_pitch_dot", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, var_pitch_dot),
          EDataTypeDouble } },

      { "var_pitch_proc", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, var_pitch_proc),
          EDataTypeDouble } },

      { "var_pitch_sens", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, var_pitch_sens),
          EDataTypeDouble } },

      { "var_pitch_sens_LS", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T,
           var_pitch_sens_LS), EDataTypeDouble } },

      { "var_roll_IMU", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, var_roll_IMU),
          EDataTypeDouble } },

      { "var_roll_dot", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, var_roll_dot),
          EDataTypeDouble } },

      { "var_roll_proc", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, var_roll_proc),
          EDataTypeDouble } },

      { "var_roll_sens", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, var_roll_sens),
          EDataTypeDouble } },

      { "var_roll_sens_LS", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, var_roll_sens_LS),
          EDataTypeDouble } },

      { "MagnetFailure", { ESimulinkStructsParameter, offsetof
          (InstP_PIDcontroller4CoreCentralizedTestReadyMotor_T, MagnetFailure),
          EDataTypeUint32 } },
    };

    static EResult
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetParameterInfo
      (PmpInternal::DynamicLibrary::ISimulink*, const char* name, SSignalInfo&
       info)
    {
      for (unsigned int i = 0; i < 124; ++i) {
        if (strcmp(name, parameterOffsets[i].Name) == 0) {
          info = parameterOffsets[i].Info;
          return EResultOk;
        }
      }

      return EResultNonExistant;
    }

    static EResult
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetUpdatableInfo
      (PmpInternal::DynamicLibrary::ISimulink*, const char*, SUpdatableInfo&)
    {
      return EResultNonExistant;
    }

    static EResult
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetEventInfo
      (PmpInternal::DynamicLibrary::ISimulink*, const char*, SEventInfo&)
    {
      return EResultNonExistant;
    }

    static EResult
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetStateInfo
      (PmpInternal::DynamicLibrary::ISimulink*, const char*, SSignalInfo&)
    {
      return EResultNonExistant;
    }

    struct OffsetAdmin
    {
      uint32_t Offset;
      uint32_t Size;
    };

    static void ClearDWork(void* ptr, int value, size_t num)
    {
      memset(ptr, value, num);
    }

    static double
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetSamplePeriod
      (PmpInternal::DynamicLibrary::ISimulink*)
    {
      return 0.00025;
    }

    static const SReflectionInfo reflectionInfo[220] = {
      { "G_A", ESimulinkStructsInput },

      { "G_B", ESimulinkStructsInput },

      { "G_C", ESimulinkStructsInput },

      { "G_D", ESimulinkStructsInput },

      { "I_A_m", ESimulinkStructsInput },

      { "I_B_m", ESimulinkStructsInput },

      { "I_C_m", ESimulinkStructsInput },

      { "I_D_m", ESimulinkStructsInput },

      { "VerticalAxisState", ESimulinkStructsInput },

      { "Vr1", ESimulinkStructsInput },

      { "Vr2", ESimulinkStructsInput },

      { "Vr3", ESimulinkStructsInput },

      { "Vr4", ESimulinkStructsInput },

      { "Vt1", ESimulinkStructsInput },

      { "Vt2", ESimulinkStructsInput },

      { "Vt3", ESimulinkStructsInput },

      { "Vt4", ESimulinkStructsInput },

      { "EMS_F_Front", ESimulinkStructsInput },

      { "EMS_F_Back", ESimulinkStructsInput },

      { "LS_mode", ESimulinkStructsInput },

      { "IMU_z", ESimulinkStructsInput },

      { "IMU_pitch", ESimulinkStructsInput },

      { "IMU_roll", ESimulinkStructsInput },

      { "I_A", ESimulinkStructsOutput },

      { "ActualReferenceAirgap", ESimulinkStructsOutput },

      { "Mode", ESimulinkStructsOutput },

      { "Airgap", ESimulinkStructsOutput },

      { "Acceleration_0", ESimulinkStructsOutput },

      { "Acceleration_1", ESimulinkStructsOutput },

      { "Acceleration_2", ESimulinkStructsOutput },

      { "CalculatedForce_0", ESimulinkStructsOutput },

      { "CalculatedForce_1", ESimulinkStructsOutput },

      { "CalculatedForce_2", ESimulinkStructsOutput },

      { "Speed_0", ESimulinkStructsOutput },

      { "Speed_1", ESimulinkStructsOutput },

      { "Speed_2", ESimulinkStructsOutput },

      { "I_B", ESimulinkStructsOutput },

      { "I_C", ESimulinkStructsOutput },

      { "I_D", ESimulinkStructsOutput },

      { "Pitch", ESimulinkStructsOutput },

      { "Roll", ESimulinkStructsOutput },

      { "G_Factor", ESimulinkStructsOutput },

      { "P_Factor", ESimulinkStructsOutput },

      { "R_Factor", ESimulinkStructsOutput },

      { "Linpos_0", ESimulinkStructsOutput },

      { "Linpos_1", ESimulinkStructsOutput },

      { "Linpos_2", ESimulinkStructsOutput },

      { "Linpos_3", ESimulinkStructsOutput },

      { "Filtered_Gaps_0", ESimulinkStructsOutput },

      { "Filtered_Gaps_1", ESimulinkStructsOutput },

      { "Filtered_Gaps_2", ESimulinkStructsOutput },

      { "Filtered_Gaps_3", ESimulinkStructsOutput },

      { "PitchError", ESimulinkStructsOutput },

      { "BeamErrorOutput_0", ESimulinkStructsOutput },

      { "BeamErrorOutput_1", ESimulinkStructsOutput },

      { "BeamErrorOutput_2", ESimulinkStructsOutput },

      { "ControlSIgnals_0", ESimulinkStructsOutput },

      { "ControlSIgnals_1", ESimulinkStructsOutput },

      { "ControlSIgnals_2", ESimulinkStructsOutput },

      { "ExternalForces_0", ESimulinkStructsOutput },

      { "ExternalForces_1", ESimulinkStructsOutput },

      { "ExternalForces_2", ESimulinkStructsOutput },

      { "HEMSForces_0", ESimulinkStructsOutput },

      { "HEMSForces_1", ESimulinkStructsOutput },

      { "HEMSForces_2", ESimulinkStructsOutput },

      { "HEMSForces_3", ESimulinkStructsOutput },

      { "motorfrontback_0", ESimulinkStructsOutput },

      { "motorfrontback_1", ESimulinkStructsOutput },

      { "RefPitchOut", ESimulinkStructsOutput },

      { "RefRollOut", ESimulinkStructsOutput },

      { "DataBeforeKalman_0", ESimulinkStructsOutput },

      { "DataBeforeKalman_1", ESimulinkStructsOutput },

      { "DataBeforeKalman_2", ESimulinkStructsOutput },

      { "Power", ESimulinkStructsOutput },

      { "Power_avg", ESimulinkStructsOutput },

      { "Energy", ESimulinkStructsOutput },

      { "CalculatedTPR_0", ESimulinkStructsOutput },

      { "CalculatedTPR_1", ESimulinkStructsOutput },

      { "CalculatedTPR_2", ESimulinkStructsOutput },

      { "Arms_0", ESimulinkStructsOutput },

      { "Arms_1", ESimulinkStructsOutput },

      { "Arms_2", ESimulinkStructsOutput },

      { "CalculatedMass", ESimulinkStructsOutput },

      { "MotorAGAdjust", ESimulinkStructsOutput },

      { "IMU_kalman_output_0", ESimulinkStructsOutput },

      { "IMU_kalman_output_1", ESimulinkStructsOutput },

      { "IMU_kalman_output_2", ESimulinkStructsOutput },

      { "MMOI_0", ESimulinkStructsOutput },

      { "MMOI_1", ESimulinkStructsOutput },

      { "MMOI_2", ESimulinkStructsOutput },

      { "PIDD", ESimulinkStructsOutput },

      { "F_Mismatch", ESimulinkStructsOutput },

      { "Kalman_Output_0", ESimulinkStructsOutput },

      { "Kalman_Output_1", ESimulinkStructsOutput },

      { "Kalman_Output_2", ESimulinkStructsOutput },

      { "AirgapFilter", ESimulinkStructsParameter },

      { "Airgap_GainSchedulingEnabled_0", ESimulinkStructsParameter },

      { "Airgap_GainSchedulingEnabled_1", ESimulinkStructsParameter },

      { "Airgap_GainSchedulingEnabled_2", ESimulinkStructsParameter },

      { "Airgap_GainSchedulingEnabled_3", ESimulinkStructsParameter },

      { "Airgap_GainSchedulingEnabled_4", ESimulinkStructsParameter },

      { "BaseRefAirgap", ESimulinkStructsParameter },

      { "BeamErrorTime", ESimulinkStructsParameter },

      { "BeamOffsets", ESimulinkStructsParameter },

      { "BeamOffsetsBackDelay", ESimulinkStructsParameter },

      { "BeamOffsetsFactor", ESimulinkStructsParameter },

      { "CoMIntegrals_0", ESimulinkStructsParameter },

      { "CoMIntegrals_1", ESimulinkStructsParameter },

      { "CoMIntegrals_2", ESimulinkStructsParameter },

      { "CurrentIntegralAG", ESimulinkStructsParameter },

      { "CurrentIntegralP", ESimulinkStructsParameter },

      { "CurrentIntegralR", ESimulinkStructsParameter },

      { "DoubleFilter", ESimulinkStructsParameter },

      { "EMSRollIntegral", ESimulinkStructsParameter },

      { "EMS_Moment_Arm_Z", ESimulinkStructsParameter },

      { "F_array_0", ESimulinkStructsParameter },

      { "F_array_1", ESimulinkStructsParameter },

      { "ForgettingFactor", ESimulinkStructsParameter },

      { "ForgettingFactorAirgap", ESimulinkStructsParameter },

      { "ForgettingFactorLinpos", ESimulinkStructsParameter },

      { "ForgettingFactorPitch", ESimulinkStructsParameter },

      { "ForgettingFactorRoll", ESimulinkStructsParameter },

      { "G_K_d", ESimulinkStructsParameter },

      { "G_K_d_LS", ESimulinkStructsParameter },

      { "G_K_i", ESimulinkStructsParameter },

      { "G_K_i_LS", ESimulinkStructsParameter },

      { "G_K_p", ESimulinkStructsParameter },

      { "G_K_p_LS", ESimulinkStructsParameter },

      { "G_T_c", ESimulinkStructsParameter },

      { "HEMS_Plane_Offsets_0", ESimulinkStructsParameter },

      { "HEMS_Plane_Offsets_1", ESimulinkStructsParameter },

      { "HEMS_Plane_Offsets_2", ESimulinkStructsParameter },

      { "HEMS_Plane_Offsets_3", ESimulinkStructsParameter },

      { "IMU_integration_gain", ESimulinkStructsParameter },

      { "Kalman_F", ESimulinkStructsParameter },

      { "Kalman_I", ESimulinkStructsParameter },

      { "Kalman_P", ESimulinkStructsParameter },

      { "Kalman_R", ESimulinkStructsParameter },

      { "LandingAirgap", ESimulinkStructsParameter },

      { "LandingTime", ESimulinkStructsParameter },

      { "LinposFilter", ESimulinkStructsParameter },

      { "LinposOn", ESimulinkStructsParameter },

      { "LowAirgapPropellingSwitch", ESimulinkStructsParameter },

      { "M_f", ESimulinkStructsParameter },

      { "Mass", ESimulinkStructsParameter },

      { "MeasureCurrent", ESimulinkStructsParameter },

      { "MismatchedHEMSKalman", ESimulinkStructsParameter },

      { "MismatchedHEMSLateral", ESimulinkStructsParameter },

      { "MismatchingKalmanAGPR_0", ESimulinkStructsParameter },

      { "MismatchingKalmanAGPR_1", ESimulinkStructsParameter },

      { "MismatchingKalmanAGPR_2", ESimulinkStructsParameter },

      { "MotorAGIntegrals", ESimulinkStructsParameter },

      { "MotorAirgapOffset", ESimulinkStructsParameter },

      { "OperatingMode", ESimulinkStructsParameter },

      { "P_K_d", ESimulinkStructsParameter },

      { "P_K_d_LS", ESimulinkStructsParameter },

      { "P_K_i", ESimulinkStructsParameter },

      { "P_K_i_LS", ESimulinkStructsParameter },

      { "P_K_p", ESimulinkStructsParameter },

      { "P_K_p_LS", ESimulinkStructsParameter },

      { "PitchFilter", ESimulinkStructsParameter },

      { "PodHeight", ESimulinkStructsParameter },

      { "PodHeightFactor", ESimulinkStructsParameter },

      { "PodLength", ESimulinkStructsParameter },

      { "PodLengthFactor", ESimulinkStructsParameter },

      { "PodWidth", ESimulinkStructsParameter },

      { "PodWidthFactor", ESimulinkStructsParameter },

      { "Polarity", ESimulinkStructsParameter },

      { "PropellingAirgap", ESimulinkStructsParameter },

      { "PropellingPitch", ESimulinkStructsParameter },

      { "PropellingRoll", ESimulinkStructsParameter },

      { "PropellingTime", ESimulinkStructsParameter },

      { "PropulsionCurrent", ESimulinkStructsParameter },

      { "PropulsionOn", ESimulinkStructsParameter },

      { "PropulsionRampTime", ESimulinkStructsParameter },

      { "R_K_d", ESimulinkStructsParameter },

      { "R_K_d_LS", ESimulinkStructsParameter },

      { "R_K_i", ESimulinkStructsParameter },

      { "R_K_i_LS", ESimulinkStructsParameter },

      { "R_K_p", ESimulinkStructsParameter },

      { "R_K_p_LS", ESimulinkStructsParameter },

      { "RefPitch", ESimulinkStructsParameter },

      { "RefRoll", ESimulinkStructsParameter },

      { "ReferenceMass", ESimulinkStructsParameter },

      { "Reference_P_Inertia", ESimulinkStructsParameter },

      { "Reference_R_Inertia", ESimulinkStructsParameter },

      { "ResetArms", ESimulinkStructsParameter },

      { "RollFilter", ESimulinkStructsParameter },

      { "RunTime", ESimulinkStructsParameter },

      { "SineSwitches_0", ESimulinkStructsParameter },

      { "SineSwitches_1", ESimulinkStructsParameter },

      { "SineSwitches_2", ESimulinkStructsParameter },

      { "SkipKalman", ESimulinkStructsParameter },

      { "StartingAirgap", ESimulinkStructsParameter },

      { "StartupTime", ESimulinkStructsParameter },

      { "Undo_0current", ESimulinkStructsParameter },

      { "UseIMU", ESimulinkStructsParameter },

      { "X_Arm_Offset", ESimulinkStructsParameter },

      { "Y_Arm_Offset", ESimulinkStructsParameter },

      { "kalman_pitchdot_gain", ESimulinkStructsParameter },

      { "kalman_rolldot_gain", ESimulinkStructsParameter },

      { "kalman_zdotdot_gain", ESimulinkStructsParameter },

      { "motorforce_on", ESimulinkStructsParameter },

      { "var_ag_IMU", ESimulinkStructsParameter },

      { "var_ag_dot", ESimulinkStructsParameter },

      { "var_ag_proc", ESimulinkStructsParameter },

      { "var_ag_sens", ESimulinkStructsParameter },

      { "var_ag_sens_LS", ESimulinkStructsParameter },

      { "var_pitch_IMU", ESimulinkStructsParameter },

      { "var_pitch_dot", ESimulinkStructsParameter },

      { "var_pitch_proc", ESimulinkStructsParameter },

      { "var_pitch_sens", ESimulinkStructsParameter },

      { "var_pitch_sens_LS", ESimulinkStructsParameter },

      { "var_roll_IMU", ESimulinkStructsParameter },

      { "var_roll_dot", ESimulinkStructsParameter },

      { "var_roll_proc", ESimulinkStructsParameter },

      { "var_roll_sens", ESimulinkStructsParameter },

      { "var_roll_sens_LS", ESimulinkStructsParameter },

      { "MagnetFailure", ESimulinkStructsParameter },

      // end with invalid entry as last
      { "", ESimulinkStructsInvalid },
    };

    static EResult
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetReflectionInfo
      (PmpInternal::DynamicLibrary::ISimulink*, const SReflectionInfo*& info)
    {
      info = reflectionInfo;
      return EResultOk;
    }

    static struct PmpInternal::DynamicLibrary::ISimulinkVTable
      ISimulinkPIDcontroller4CoreCentralizedTestReadyMotor = {
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetInputsDataSize,
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetOutputsDataSize,
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetTestpointsDataSize,
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetParametersDataSize,
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetUpdatableDataSize,
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetEventsDataSize,
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetStateDataSize,
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_SetInputsDataAddress,
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_SetOutputsDataAddress,
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_SetTestpointsDataAddress,
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_SetParametersDataAddress,
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_SetUpdatableDataAddress,
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_SetEventsDataAddress,
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_SetStateDataAddress,
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetInputInfo,
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetOutputInfo,
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetTestpointInfo,
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetParameterInfo,
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetUpdatableInfo,
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetEventInfo,
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetStateInfo,
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetSamplePeriod,
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_Init,
                // PreInit is not known for simulink. Full init is done instead.
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_Init,
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_Update,
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_Output,
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_Terminate,
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor_GetReflectionInfo
    };

    CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor::
      CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor(void * modelData)
      : modelData(modelData)
    {
      vtable = &ISimulinkPIDcontroller4CoreCentralizedTestReadyMotor;
      memset(&events, 0, sizeof(events));
    }

    static ISimulink * createCorePIDcontroller4CoreCentralizedTestReadyMotor()
    {
      RT_MODEL_PIDcontroller4CoreCentralizedTestReadyMotor_T
        * PIDcontroller4CoreCentralizedTestReadyMotor_M =
        (RT_MODEL_PIDcontroller4CoreCentralizedTestReadyMotor_T*) malloc(sizeof
        (RT_MODEL_PIDcontroller4CoreCentralizedTestReadyMotor_T));
      if (PIDcontroller4CoreCentralizedTestReadyMotor_M == NULL) {
        return NULL;
      }

      (void) memset((char*) PIDcontroller4CoreCentralizedTestReadyMotor_M, 0,
                    sizeof
                    (RT_MODEL_PIDcontroller4CoreCentralizedTestReadyMotor_T));

      /* previous zero-crossing states */
      {
        PrevZCX_PIDcontroller4CoreCentralizedTestReadyMotor_T *zc =
          (PrevZCX_PIDcontroller4CoreCentralizedTestReadyMotor_T *) malloc
          (sizeof(PrevZCX_PIDcontroller4CoreCentralizedTestReadyMotor_T));
        rt_VALIDATE_MEMORY(PIDcontroller4CoreCentralizedTestReadyMotor_M,zc);
        PIDcontroller4CoreCentralizedTestReadyMotor_M->prevZCSigState = (zc);
      }

      {
        /* Setup solver object */
        RTWSolverInfo *rt_SolverInfo = (RTWSolverInfo *) malloc(sizeof
          (RTWSolverInfo));
        rt_VALIDATE_MEMORY(PIDcontroller4CoreCentralizedTestReadyMotor_M,
                           rt_SolverInfo);
        PIDcontroller4CoreCentralizedTestReadyMotor_M->solverInfo =
          (rt_SolverInfo);
        rtsiSetSimTimeStepPtr
          (PIDcontroller4CoreCentralizedTestReadyMotor_M->solverInfo,
           &PIDcontroller4CoreCentralizedTestReadyMotor_M->Timing.simTimeStep);
        rtsiSetTPtr(PIDcontroller4CoreCentralizedTestReadyMotor_M->solverInfo,
                    &rtmGetTPtr(PIDcontroller4CoreCentralizedTestReadyMotor_M));
        rtsiSetStepSizePtr
          (PIDcontroller4CoreCentralizedTestReadyMotor_M->solverInfo,
           &PIDcontroller4CoreCentralizedTestReadyMotor_M->Timing.stepSize0);
        rtsiSetErrorStatusPtr
          (PIDcontroller4CoreCentralizedTestReadyMotor_M->solverInfo,
           (&rtmGetErrorStatus(PIDcontroller4CoreCentralizedTestReadyMotor_M)));
        rtsiSetRTModelPtr
          (PIDcontroller4CoreCentralizedTestReadyMotor_M->solverInfo,
           PIDcontroller4CoreCentralizedTestReadyMotor_M);
      }

      rtsiSetSolverName
        (PIDcontroller4CoreCentralizedTestReadyMotor_M->solverInfo,
         "FixedStepDiscrete");
      return new CSimulinkCorePIDcontroller4CoreCentralizedTestReadyMotor((void*)
        PIDcontroller4CoreCentralizedTestReadyMotor_M);
    }

    PmpInternal::DynamicLibrary::ISimulink *
      InternalCreatePIDcontroller4CoreCentralizedTestReadyMotor(PmpInternal::
      DynamicLibrary::PmpCallbacks * callbacks)
    {
      if (callbacks) {
        // Assignment of large structs is by some compilers translated to memcpy. However, that function is not yet available. So instead use the memcpy in the callback
        callbacks->memcpy(&PmpInternal::DynamicLibrary::libCallbacks, callbacks,
                          sizeof(PmpInternal::DynamicLibrary::libCallbacks));
        uintptr_t * startAddr = (uintptr_t*) callbacks;
        for (uint32_t i = 0; i < sizeof(PmpInternal::DynamicLibrary::
              libCallbacks) / sizeof(uintptr_t*); ++i) {
          if (startAddr == NULL) {
            callbacks->fatalError("Missing function");
          }

          ++startAddr;
        }
      } else {
        memset(&PmpInternal::DynamicLibrary::libCallbacks, 0, sizeof(PmpInternal::
                DynamicLibrary::libCallbacks));
      }

      return createCorePIDcontroller4CoreCentralizedTestReadyMotor();
    }
  }                                    // Namespace: DynamicLibrary
}                                      // Namespace: PmpInternal

// For built in blocks these do not have to be external symbols on the dll
#ifndef BUILT_IN_BLOCK

PMP_DLL_ATTR
  uint32_t GetVersion()
{
  return PmpInternal::DynamicLibrary::major_version;
}

PMP_DLL_ATTR
  void GetIntfVersion(uint32_t* major, uint32_t* minor)
{
  *major = PmpInternal::DynamicLibrary::major_version;
  *minor = PmpInternal::DynamicLibrary::minor_version;
}

PMP_DLL_ATTR
  PmpInternal::DynamicLibrary::ISimulink * Create(PmpInternal::DynamicLibrary::
  PmpCallbacks * callbacks)
{
  return PmpInternal::DynamicLibrary::
    InternalCreatePIDcontroller4CoreCentralizedTestReadyMotor(callbacks);
}

#else

// registrar is only used in combination with builtin blocks.
#ifdef USE_REGISTRAR
#include "simulink_registrar.h"

class StaticInit
{
 public:
  StaticInit()
  {
    SimulinkRegistrar_Add("PIDcontroller4CoreCentralizedTestReadyMotor",
                          &PmpInternal::DynamicLibrary::
                          InternalCreatePIDcontroller4CoreCentralizedTestReadyMotor);
  }
};

static StaticInit staticInit;

#else

extern "C" VISIBLE PmpInternal::DynamicLibrary::ISimulink *
  CreateSimulinkPIDcontroller4CoreCentralizedTestReadyMotor(PmpInternal::
  DynamicLibrary::PmpCallbacks * callbacks)
{
  return PmpInternal::DynamicLibrary::
    InternalCreatePIDcontroller4CoreCentralizedTestReadyMotor(callbacks);
}

#endif
#endif
