import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _extends from "@babel/runtime/helpers/esm/extends";
import * as React from 'react';
import { jsx as _jsx } from "react/jsx-runtime";
export var InteractionContext = /*#__PURE__*/React.createContext({
  item: null,
  axis: {
    x: null,
    y: null
  },
  dispatch: function dispatch() {
    return null;
  }
});
var dataReducer = function dataReducer(prevState, action) {
  switch (action.type) {
    case 'enterItem':
      return _extends({}, prevState, {
        item: action.data
      });
    case 'leaveItem':
      if (prevState.item === null || Object.keys(action.data).some(function (key) {
        return action.data[key] !== prevState.item[key];
      })) {
        // The item is already something else
        return prevState;
      }
      return _extends({}, prevState, {
        item: null
      });
    case 'updateAxis':
      return _extends({}, prevState, {
        axis: action.data
      });
    default:
      return prevState;
  }
};
function InteractionProvider(props) {
  var children = props.children;
  var _React$useReducer = React.useReducer(dataReducer, {
      item: null,
      axis: {
        x: null,
        y: null
      }
    }),
    _React$useReducer2 = _slicedToArray(_React$useReducer, 2),
    data = _React$useReducer2[0],
    dispatch = _React$useReducer2[1];
  var value = React.useMemo(function () {
    return _extends({}, data, {
      dispatch: dispatch
    });
  }, [data]);
  return /*#__PURE__*/_jsx(InteractionContext.Provider, {
    value: value,
    children: children
  });
}
export { InteractionProvider };