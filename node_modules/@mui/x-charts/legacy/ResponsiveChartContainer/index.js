import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
var _excluded = ["width", "height"];
import * as React from 'react';
import useEnhancedEffect from '@mui/utils/useEnhancedEffect';
import ownerWindow from '@mui/utils/ownerWindow';
import { styled } from '@mui/material/styles';
import { ChartContainer } from '../ChartContainer';
import { jsx as _jsx } from "react/jsx-runtime";
var useChartDimensions = function useChartDimensions(inWidth, inHeight) {
  var rootRef = React.useRef(null);
  var displayError = React.useRef(false);
  var _React$useState = React.useState(0),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    width = _React$useState2[0],
    setWidth = _React$useState2[1];
  var _React$useState3 = React.useState(0),
    _React$useState4 = _slicedToArray(_React$useState3, 2),
    height = _React$useState4[0],
    setHeight = _React$useState4[1];

  // Adaptation of the `computeSizeAndPublishResizeEvent` from the grid.
  var computeSize = React.useCallback(function () {
    var mainEl = rootRef == null ? void 0 : rootRef.current;
    if (!mainEl) {
      return;
    }
    var win = ownerWindow(mainEl);
    var computedStyle = win.getComputedStyle(mainEl);
    var newHeight = Math.floor(parseFloat(computedStyle.height)) || 0;
    var newWidth = Math.floor(parseFloat(computedStyle.width)) || 0;
    setWidth(newWidth);
    setHeight(newHeight);
  }, []);
  React.useEffect(function () {
    // Ensure the error detection occurs after the first rendering.
    displayError.current = true;
  }, []);
  useEnhancedEffect(function () {
    if (inWidth !== undefined && inHeight !== undefined) {
      return function () {};
    }
    computeSize();
    var elementToObserve = rootRef.current;
    if (typeof ResizeObserver === 'undefined') {
      return function () {};
    }
    var animationFrame;
    var observer = new ResizeObserver(function () {
      // See https://github.com/mui/mui-x/issues/8733
      animationFrame = requestAnimationFrame(function () {
        computeSize();
      });
    });
    if (elementToObserve) {
      observer.observe(elementToObserve);
    }
    return function () {
      if (animationFrame) {
        window.cancelAnimationFrame(animationFrame);
      }
      if (elementToObserve) {
        observer.unobserve(elementToObserve);
      }
    };
  }, [computeSize, inHeight, inWidth]);
  if (process.env.NODE_ENV !== 'production') {
    if (displayError.current && inWidth === undefined && width === 0) {
      console.error("MUI-X-Charts: ChartContainer does not have `width` prop, and its container has no `width` defined.");
      displayError.current = false;
    }
    if (displayError.current && inHeight === undefined && height === 0) {
      console.error("MUI-X-Charts: ChartContainer does not have `height` prop, and its container has no `height` defined.");
      displayError.current = false;
    }
  }
  return [rootRef, inWidth != null ? inWidth : width, inHeight != null ? inHeight : height];
};
var ResizableContainer = styled('div', {
  name: 'MuiResponsiveChart',
  slot: 'Container'
})(function (_ref) {
  var _ownerState$width, _ownerState$height;
  var ownerState = _ref.ownerState;
  return {
    width: (_ownerState$width = ownerState.width) != null ? _ownerState$width : '100%',
    height: (_ownerState$height = ownerState.height) != null ? _ownerState$height : '100%',
    display: 'flex',
    position: 'relative',
    flexGrow: 1,
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center',
    overflow: 'hidden',
    '&>svg': {
      width: '100%',
      height: '100%'
    }
  };
});
export var ResponsiveChartContainer = /*#__PURE__*/React.forwardRef(function ResponsiveChartContainer(props, ref) {
  var inWidth = props.width,
    inHeight = props.height,
    other = _objectWithoutProperties(props, _excluded);
  var _useChartDimensions = useChartDimensions(inWidth, inHeight),
    _useChartDimensions2 = _slicedToArray(_useChartDimensions, 3),
    containerRef = _useChartDimensions2[0],
    width = _useChartDimensions2[1],
    height = _useChartDimensions2[2];
  return /*#__PURE__*/_jsx(ResizableContainer, {
    ref: containerRef,
    ownerState: {
      width: inWidth,
      height: inHeight
    },
    children: width && height ? /*#__PURE__*/_jsx(ChartContainer, _extends({}, other, {
      width: width,
      height: height,
      ref: ref
    })) : null
  });
});