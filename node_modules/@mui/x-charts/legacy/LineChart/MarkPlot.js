import _extends from "@babel/runtime/helpers/esm/extends";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["slots", "slotProps"];
import * as React from 'react';
import PropTypes from 'prop-types';
import { SeriesContext } from '../context/SeriesContextProvider';
import { CartesianContext } from '../context/CartesianContextProvider';
import { MarkElement } from './MarkElement';
import { getValueToPositionMapper } from '../hooks/useScale';
import { DEFAULT_X_AXIS_KEY } from '../constants';
import { jsx as _jsx } from "react/jsx-runtime";
/**
 * Demos:
 *
 * - [Lines](https://mui.com/x/react-charts/lines/)
 * - [Line demonstration](https://mui.com/x/react-charts/line-demo/)
 *
 * API:
 *
 * - [MarkPlot API](https://mui.com/x/api/charts/mark-plot/)
 */
function MarkPlot(props) {
  var _slots$mark;
  var slots = props.slots,
    slotProps = props.slotProps,
    other = _objectWithoutProperties(props, _excluded);
  var seriesData = React.useContext(SeriesContext).line;
  var axisData = React.useContext(CartesianContext);
  var Mark = (_slots$mark = slots == null ? void 0 : slots.mark) != null ? _slots$mark : MarkElement;
  if (seriesData === undefined) {
    return null;
  }
  var series = seriesData.series,
    stackingGroups = seriesData.stackingGroups;
  var xAxis = axisData.xAxis,
    yAxis = axisData.yAxis,
    xAxisIds = axisData.xAxisIds,
    yAxisIds = axisData.yAxisIds;
  var defaultXAxisId = xAxisIds[0];
  var defaultYAxisId = yAxisIds[0];
  return /*#__PURE__*/_jsx("g", _extends({}, other, {
    children: stackingGroups.flatMap(function (_ref) {
      var groupIds = _ref.ids;
      return groupIds.flatMap(function (seriesId) {
        var _series$seriesId = series[seriesId],
          _series$seriesId$xAxi = _series$seriesId.xAxisKey,
          xAxisKey = _series$seriesId$xAxi === void 0 ? defaultXAxisId : _series$seriesId$xAxi,
          _series$seriesId$yAxi = _series$seriesId.yAxisKey,
          yAxisKey = _series$seriesId$yAxi === void 0 ? defaultYAxisId : _series$seriesId$yAxi,
          stackedData = _series$seriesId.stackedData,
          data = _series$seriesId.data,
          _series$seriesId$show = _series$seriesId.showMark,
          showMark = _series$seriesId$show === void 0 ? true : _series$seriesId$show;
        if (showMark === false) {
          return null;
        }
        var xScale = getValueToPositionMapper(xAxis[xAxisKey].scale);
        var yScale = yAxis[yAxisKey].scale;
        var xData = xAxis[xAxisKey].data;
        var xRange = xAxis[xAxisKey].scale.range();
        var yRange = yScale.range();
        var isInRange = function isInRange(_ref2) {
          var x = _ref2.x,
            y = _ref2.y;
          if (x < Math.min.apply(Math, _toConsumableArray(xRange)) || x > Math.max.apply(Math, _toConsumableArray(xRange))) {
            return false;
          }
          if (y < Math.min.apply(Math, _toConsumableArray(yRange)) || y > Math.max.apply(Math, _toConsumableArray(yRange))) {
            return false;
          }
          return true;
        };
        if (xData === undefined) {
          throw new Error("MUI-X-Charts: ".concat(xAxisKey === DEFAULT_X_AXIS_KEY ? 'The first `xAxis`' : "The x-axis with id \"".concat(xAxisKey, "\""), " should have data property to be able to display a line plot"));
        }
        return xData == null ? void 0 : xData.map(function (x, index) {
          var value = data[index] == null ? null : stackedData[index][1];
          return {
            x: xScale(x),
            y: value === null ? null : yScale(value),
            position: x,
            value: value,
            index: index
          };
        }).filter(function (_ref3) {
          var x = _ref3.x,
            y = _ref3.y,
            index = _ref3.index,
            position = _ref3.position,
            value = _ref3.value;
          if (value === null || y === null) {
            // Remove missing data point
            return false;
          }
          if (!isInRange({
            x: x,
            y: y
          })) {
            // Remove out of range
            return false;
          }
          if (showMark === true) {
            return true;
          }
          return showMark({
            x: x,
            y: y,
            index: index,
            position: position,
            value: value
          });
        }).map(function (_ref4) {
          var x = _ref4.x,
            y = _ref4.y,
            index = _ref4.index;
          return /*#__PURE__*/_jsx(Mark, _extends({
            id: seriesId,
            dataIndex: index,
            shape: "circle",
            color: series[seriesId].color,
            x: x,
            y: y // Don't knwo why TS don't get from the filter that y can't be null
            ,
            highlightScope: series[seriesId].highlightScope
          }, slotProps == null ? void 0 : slotProps.mark), "".concat(seriesId, "-").concat(index));
        });
      });
    })
  }));
}
process.env.NODE_ENV !== "production" ? MarkPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: PropTypes.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: PropTypes.object
} : void 0;
export { MarkPlot };