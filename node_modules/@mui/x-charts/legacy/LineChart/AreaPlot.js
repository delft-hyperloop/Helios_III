import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["slots", "slotProps"];
import * as React from 'react';
import PropTypes from 'prop-types';
import { area as d3Area } from 'd3-shape';
import { SeriesContext } from '../context/SeriesContextProvider';
import { CartesianContext } from '../context/CartesianContextProvider';
import { AreaElement } from './AreaElement';
import { getValueToPositionMapper } from '../hooks/useScale';
import getCurveFactory from '../internals/getCurve';
import { DEFAULT_X_AXIS_KEY } from '../constants';
import { jsx as _jsx } from "react/jsx-runtime";
/**
 * Demos:
 *
 * - [Lines](https://mui.com/x/react-charts/lines/)
 * - [Areas demonstration](https://mui.com/x/react-charts/areas-demo/)
 * - [Stacking](https://mui.com/x/react-charts/stacking/)
 *
 * API:
 *
 * - [AreaPlot API](https://mui.com/x/api/charts/area-plot/)
 */
function AreaPlot(props) {
  var slots = props.slots,
    slotProps = props.slotProps,
    other = _objectWithoutProperties(props, _excluded);
  var seriesData = React.useContext(SeriesContext).line;
  var axisData = React.useContext(CartesianContext);
  if (seriesData === undefined) {
    return null;
  }
  var series = seriesData.series,
    stackingGroups = seriesData.stackingGroups;
  var xAxis = axisData.xAxis,
    yAxis = axisData.yAxis,
    xAxisIds = axisData.xAxisIds,
    yAxisIds = axisData.yAxisIds;
  var defaultXAxisId = xAxisIds[0];
  var defaultYAxisId = yAxisIds[0];
  return /*#__PURE__*/_jsx("g", _extends({}, other, {
    children: stackingGroups.flatMap(function (_ref) {
      var groupIds = _ref.ids;
      return groupIds.flatMap(function (seriesId) {
        var _xData$map;
        var _series$seriesId = series[seriesId],
          _series$seriesId$xAxi = _series$seriesId.xAxisKey,
          xAxisKey = _series$seriesId$xAxi === void 0 ? defaultXAxisId : _series$seriesId$xAxi,
          _series$seriesId$yAxi = _series$seriesId.yAxisKey,
          yAxisKey = _series$seriesId$yAxi === void 0 ? defaultYAxisId : _series$seriesId$yAxi,
          stackedData = _series$seriesId.stackedData,
          data = _series$seriesId.data,
          connectNulls = _series$seriesId.connectNulls;
        var xScale = getValueToPositionMapper(xAxis[xAxisKey].scale);
        var yScale = yAxis[yAxisKey].scale;
        var xData = xAxis[xAxisKey].data;
        if (process.env.NODE_ENV !== 'production') {
          if (xData === undefined) {
            throw new Error("MUI-X-Charts: ".concat(xAxisKey === DEFAULT_X_AXIS_KEY ? 'The first `xAxis`' : "The x-axis with id \"".concat(xAxisKey, "\""), " should have data property to be able to display a line plot."));
          }
          if (xData.length < stackedData.length) {
            throw new Error("MUI-X-Charts: The data length of the x axis (".concat(xData.length, " items) is lower than the length of series (").concat(stackedData.length, " items)"));
          }
        }
        var areaPath = d3Area().x(function (d) {
          return xScale(d.x);
        }).defined(function (_, i) {
          return connectNulls || data[i] != null;
        }).y0(function (d) {
          return d.y && yScale(d.y[0]);
        }).y1(function (d) {
          return d.y && yScale(d.y[1]);
        });
        var curve = getCurveFactory(series[seriesId].curve);
        var formattedData = (_xData$map = xData == null ? void 0 : xData.map(function (x, index) {
          return {
            x: x,
            y: stackedData[index]
          };
        })) != null ? _xData$map : [];
        var d3Data = connectNulls ? formattedData.filter(function (_, i) {
          return data[i] != null;
        }) : formattedData;
        return !!series[seriesId].area && /*#__PURE__*/_jsx(AreaElement, {
          id: seriesId,
          d: areaPath.curve(curve)(d3Data) || undefined,
          color: series[seriesId].color,
          highlightScope: series[seriesId].highlightScope,
          slots: slots,
          slotProps: slotProps
        }, seriesId);
      });
    })
  }));
}
process.env.NODE_ENV !== "production" ? AreaPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: PropTypes.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: PropTypes.object
} : void 0;
export { AreaPlot };