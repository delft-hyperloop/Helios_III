import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["slots", "slotProps"];
import * as React from 'react';
import PropTypes from 'prop-types';
import { SeriesContext } from '../context/SeriesContextProvider';
import { CartesianContext } from '../context/CartesianContextProvider';
import { LineHighlightElement } from './LineHighlightElement';
import { getValueToPositionMapper } from '../hooks/useScale';
import { InteractionContext } from '../context/InteractionProvider';
import { DEFAULT_X_AXIS_KEY } from '../constants';
import { jsx as _jsx } from "react/jsx-runtime";
/**
 * Demos:
 *
 * - [Lines](https://mui.com/x/react-charts/lines/)
 * - [Line demonstration](https://mui.com/x/react-charts/line-demo/)
 *
 * API:
 *
 * - [LineHighlightPlot API](https://mui.com/x/api/charts/line-highlight-plot/)
 */
function LineHighlightPlot(props) {
  var _axis$x, _slots$lineHighlight;
  var slots = props.slots,
    slotProps = props.slotProps,
    other = _objectWithoutProperties(props, _excluded);
  var seriesData = React.useContext(SeriesContext).line;
  var axisData = React.useContext(CartesianContext);
  var _React$useContext = React.useContext(InteractionContext),
    axis = _React$useContext.axis;
  var highlightedIndex = (_axis$x = axis.x) == null ? void 0 : _axis$x.index;
  if (highlightedIndex === undefined) {
    return null;
  }
  if (seriesData === undefined) {
    return null;
  }
  var series = seriesData.series,
    stackingGroups = seriesData.stackingGroups;
  var xAxis = axisData.xAxis,
    yAxis = axisData.yAxis,
    xAxisIds = axisData.xAxisIds,
    yAxisIds = axisData.yAxisIds;
  var defaultXAxisId = xAxisIds[0];
  var defaultYAxisId = yAxisIds[0];
  var Element = (_slots$lineHighlight = slots == null ? void 0 : slots.lineHighlight) != null ? _slots$lineHighlight : LineHighlightElement;
  return /*#__PURE__*/_jsx("g", _extends({}, other, {
    children: stackingGroups.flatMap(function (_ref) {
      var groupIds = _ref.ids;
      return groupIds.flatMap(function (seriesId) {
        var _series$seriesId = series[seriesId],
          _series$seriesId$xAxi = _series$seriesId.xAxisKey,
          xAxisKey = _series$seriesId$xAxi === void 0 ? defaultXAxisId : _series$seriesId$xAxi,
          _series$seriesId$yAxi = _series$seriesId.yAxisKey,
          yAxisKey = _series$seriesId$yAxi === void 0 ? defaultYAxisId : _series$seriesId$yAxi,
          stackedData = _series$seriesId.stackedData,
          data = _series$seriesId.data,
          disableHighlight = _series$seriesId.disableHighlight;
        if (disableHighlight || data[highlightedIndex] == null) {
          return null;
        }
        var xScale = getValueToPositionMapper(xAxis[xAxisKey].scale);
        var yScale = yAxis[yAxisKey].scale;
        var xData = xAxis[xAxisKey].data;
        if (xData === undefined) {
          throw new Error("MUI-X-Charts: ".concat(xAxisKey === DEFAULT_X_AXIS_KEY ? 'The first `xAxis`' : "The x-axis with id \"".concat(xAxisKey, "\""), " should have data property to be able to display a line plot."));
        }
        var x = xScale(xData[highlightedIndex]);
        var y = yScale(stackedData[highlightedIndex][1]); // This should not be undefined since y should not be a band scale
        return /*#__PURE__*/_jsx(Element, _extends({
          id: seriesId,
          color: series[seriesId].color,
          x: x,
          y: y
        }, slotProps == null ? void 0 : slotProps.lineHighlight), "".concat(seriesId));
      });
    })
  }));
}
process.env.NODE_ENV !== "production" ? LineHighlightPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: PropTypes.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: PropTypes.object
} : void 0;
export { LineHighlightPlot };