import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["x", "y", "id", "classes", "color", "shape", "dataIndex", "highlightScope"];
import * as React from 'react';
import PropTypes from 'prop-types';
import composeClasses from '@mui/utils/composeClasses';
import generateUtilityClass from '@mui/utils/generateUtilityClass';
import { styled } from '@mui/material/styles';
import generateUtilityClasses from '@mui/utils/generateUtilityClasses';
import { symbol as d3Symbol, symbolsFill as d3SymbolsFill } from 'd3-shape';
import { getSymbol } from '../internals/utils';
import { InteractionContext } from '../context/InteractionProvider';
import { getIsFaded, getIsHighlighted, useInteractionItemProps } from '../hooks/useInteractionItemProps';
import { jsx as _jsx } from "react/jsx-runtime";
export function getMarkElementUtilityClass(slot) {
  return generateUtilityClass('MuiMarkElement', slot);
}
export var markElementClasses = generateUtilityClasses('MuiMarkElement', ['root', 'highlighted', 'faded']);
var useUtilityClasses = function useUtilityClasses(ownerState) {
  var classes = ownerState.classes,
    id = ownerState.id,
    isFaded = ownerState.isFaded,
    isHighlighted = ownerState.isHighlighted;
  var slots = {
    root: ['root', "series-".concat(id), isHighlighted && 'highlighted', isFaded && 'faded']
  };
  return composeClasses(slots, getMarkElementUtilityClass, classes);
};
var MarkElementPath = styled('path', {
  name: 'MuiMarkElement',
  slot: 'Root',
  overridesResolver: function overridesResolver(_, styles) {
    return styles.root;
  }
})(function (_ref) {
  var ownerState = _ref.ownerState,
    theme = _ref.theme;
  return {
    transform: "translate(".concat(ownerState.x, "px, ").concat(ownerState.y, "px)"),
    transformOrigin: "".concat(ownerState.x, "px ").concat(ownerState.y, "px"),
    fill: (theme.vars || theme).palette.background.paper,
    stroke: ownerState.color,
    strokeWidth: 2
  };
});
MarkElementPath.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  as: PropTypes.elementType,
  ownerState: PropTypes.shape({
    classes: PropTypes.object,
    color: PropTypes.string.isRequired,
    id: PropTypes.string.isRequired,
    isFaded: PropTypes.bool.isRequired,
    isHighlighted: PropTypes.bool.isRequired,
    x: PropTypes.number.isRequired,
    y: PropTypes.number.isRequired
  }).isRequired,
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
};
/**
 * Demos:
 *
 * - [Lines](https://mui.com/x/react-charts/lines/)
 * - [Line demonstration](https://mui.com/x/react-charts/line-demo/)
 *
 * API:
 *
 * - [MarkElement API](https://mui.com/x/api/charts/mark-element/)
 */
function MarkElement(props) {
  var _axis$x;
  var x = props.x,
    y = props.y,
    id = props.id,
    innerClasses = props.classes,
    color = props.color,
    shape = props.shape,
    dataIndex = props.dataIndex,
    highlightScope = props.highlightScope,
    other = _objectWithoutProperties(props, _excluded);
  var getInteractionItemProps = useInteractionItemProps(highlightScope);
  var _React$useContext = React.useContext(InteractionContext),
    item = _React$useContext.item,
    axis = _React$useContext.axis;
  var isHighlighted = ((_axis$x = axis.x) == null ? void 0 : _axis$x.index) === dataIndex || getIsHighlighted(item, {
    type: 'line',
    seriesId: id
  }, highlightScope);
  var isFaded = !isHighlighted && getIsFaded(item, {
    type: 'line',
    seriesId: id
  }, highlightScope);
  var ownerState = {
    id: id,
    classes: innerClasses,
    isHighlighted: isHighlighted,
    isFaded: isFaded,
    color: color,
    x: x,
    y: y
  };
  var classes = useUtilityClasses(ownerState);
  return /*#__PURE__*/_jsx(MarkElementPath, _extends({}, other, {
    ownerState: ownerState,
    className: classes.root,
    d: d3Symbol(d3SymbolsFill[getSymbol(shape)])()
  }, getInteractionItemProps({
    type: 'line',
    seriesId: id,
    dataIndex: dataIndex
  })));
}
process.env.NODE_ENV !== "production" ? MarkElement.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  classes: PropTypes.object,
  /**
   * The index to the element in the series' data array.
   */
  dataIndex: PropTypes.number.isRequired,
  highlightScope: PropTypes.shape({
    faded: PropTypes.oneOf(['global', 'none', 'series']),
    highlighted: PropTypes.oneOf(['item', 'none', 'series'])
  }),
  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,
  /**
   * The shape of the marker.
   */
  shape: PropTypes.oneOf(['circle', 'cross', 'diamond', 'square', 'star', 'triangle', 'wye']).isRequired
} : void 0;
export { MarkElement };