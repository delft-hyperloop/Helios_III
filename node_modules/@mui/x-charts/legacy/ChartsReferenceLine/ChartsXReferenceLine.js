import _extends from "@babel/runtime/helpers/esm/extends";
import _typeof from "@babel/runtime/helpers/esm/typeof";
import * as React from 'react';
import composeClasses from '@mui/utils/composeClasses';
import { useDrawingArea, useXScale } from '../hooks';
import { ReferenceLineRoot } from './common';
import { ChartsText } from '../ChartsText';
import { getReferenceLineUtilityClass } from './chartsReferenceLineClasses';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var getTextParams = function getTextParams(_ref) {
  var top = _ref.top,
    height = _ref.height,
    spacingY = _ref.spacingY,
    _ref$labelAlign = _ref.labelAlign,
    labelAlign = _ref$labelAlign === void 0 ? 'middle' : _ref$labelAlign;
  switch (labelAlign) {
    case 'start':
      return {
        y: top + spacingY,
        style: {
          dominantBaseline: 'hanging',
          textAnchor: 'start'
        }
      };
    case 'end':
      return {
        y: top + height - spacingY,
        style: {
          dominantBaseline: 'auto',
          textAnchor: 'start'
        }
      };
    default:
      return {
        y: top + height / 2,
        style: {
          dominantBaseline: 'central',
          textAnchor: 'start'
        }
      };
  }
};
export function getXReferenceLineClasses(classes) {
  return composeClasses({
    root: ['root', 'vertical'],
    line: ['line'],
    label: ['label']
  }, getReferenceLineUtilityClass, classes);
}
var warnedOnce = false;
function ChartsXReferenceLine(props) {
  var _spacing$x, _spacing$y;
  var x = props.x,
    _props$label = props.label,
    label = _props$label === void 0 ? '' : _props$label,
    _props$spacing = props.spacing,
    spacing = _props$spacing === void 0 ? 5 : _props$spacing,
    inClasses = props.classes,
    labelAlign = props.labelAlign,
    lineStyle = props.lineStyle,
    labelStyle = props.labelStyle,
    axisId = props.axisId;
  var _useDrawingArea = useDrawingArea(),
    top = _useDrawingArea.top,
    height = _useDrawingArea.height;
  var xAxisScale = useXScale(axisId);
  var xPosition = xAxisScale(x);
  if (xPosition === undefined) {
    if (process.env.NODE_ENV !== 'production') {
      if (!warnedOnce) {
        warnedOnce = true;
        console.error("MUI X: the value ".concat(x, " does not exist in the data of x axis with id ").concat(axisId, "."));
      }
    }
    return null;
  }
  var d = "M ".concat(xPosition, " ").concat(top, " l 0 ").concat(height);
  var classes = getXReferenceLineClasses(inClasses);
  var spacingX = _typeof(spacing) === 'object' ? (_spacing$x = spacing.x) != null ? _spacing$x : 0 : spacing;
  var spacingY = _typeof(spacing) === 'object' ? (_spacing$y = spacing.y) != null ? _spacing$y : 0 : spacing;
  var textParams = _extends({
    x: xPosition + spacingX,
    text: label,
    fontSize: 12
  }, getTextParams({
    top: top,
    height: height,
    spacingY: spacingY,
    labelAlign: labelAlign
  }), {
    className: classes.label
  });
  return /*#__PURE__*/_jsxs(ReferenceLineRoot, {
    className: classes.root,
    children: [/*#__PURE__*/_jsx("path", {
      d: d,
      className: classes.line,
      style: lineStyle
    }), /*#__PURE__*/_jsx(ChartsText, _extends({}, textParams, {
      style: _extends({}, textParams.style, labelStyle)
    }))]
  });
}
export { ChartsXReferenceLine };